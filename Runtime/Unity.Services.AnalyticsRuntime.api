// This file is generated. Do not modify by hand.
// XML documentation file not found. To check if public methods have XML comments,
// make sure the XML doc file is present and located next to the scraped dll
namespace Unity.Services.Analytics.Internal
{
    public class AnalyticsForgetter : Unity.Services.Analytics.Internal.IAnalyticsForgetter
    {
        public AnalyticsForgetter(string collectUrl, string userId, string timestamp, string callingMethod, System.Action successfulUploadCallback, Unity.Services.Analytics.Internal.IConsentTracker consentTracker = default(Unity.Services.Analytics.Internal.IConsentTracker)) {}
        public virtual void AttemptToForget();
    }

    public class Buffer : Unity.Services.Analytics.Internal.IBuffer
    {
        public virtual string InstallID { get; set; }
        public virtual string PlayerID { get; set; }
        public virtual string SessionID { get; set; }
        public virtual string UserID { get; set; }
        public Buffer() {}
        public virtual void ClearBuffer();
        public virtual void ClearDiskCache();
        public virtual System.Collections.Generic.List<Unity.Services.Analytics.Internal.Buffer.Token> CloneTokens();
        public virtual void FlushToDisk();
        public virtual void InsertTokens(System.Collections.Generic.List<Unity.Services.Analytics.Internal.Buffer.Token> tokens);
        public virtual void LoadFromDisk();
        public virtual void PushArrayEnd();
        public virtual void PushArrayStart(string name = default(string));
        public virtual void PushBool(bool val, string name = default(string));
        public virtual void PushDouble(double val, string name = default(string));
        public virtual void PushEndEvent();
        public virtual void PushEvent(Unity.Services.Analytics.Internal.Event evt);
        public virtual void PushFloat(float val, string name = default(string));
        public virtual void PushInt(int val, string name = default(string));
        public virtual void PushInt64(long val, string name = default(string));
        public virtual void PushObjectEnd();
        public virtual void PushObjectStart(string name = default(string));
        public virtual void PushStartEvent(string name, System.DateTime datetime, System.Nullable<long> eventVersion, bool addPlayerIdsToEventBody = False);
        public virtual void PushString(string val, string name = default(string));
        public virtual void PushTimestamp(System.DateTime val, string name);
        public static string SaveDateTime(System.DateTime dateTime);
        public virtual string Serialize(System.Collections.Generic.List<Unity.Services.Analytics.Internal.Buffer.Token> tokens);
        public struct Token
        {
            public object Data;
            public string Name;
            public Unity.Services.Analytics.Internal.Buffer.TokenType Type;
        }
        public enum TokenType
        {
            public const Unity.Services.Analytics.Internal.Buffer.TokenType Boolean = 8;
            public const Unity.Services.Analytics.Internal.Buffer.TokenType EventArrayEnd = 7;
            public const Unity.Services.Analytics.Internal.Buffer.TokenType EventArrayStart = 6;
            public const Unity.Services.Analytics.Internal.Buffer.TokenType EventEnd = 1;
            public const Unity.Services.Analytics.Internal.Buffer.TokenType EventObjectEnd = 5;
            public const Unity.Services.Analytics.Internal.Buffer.TokenType EventObjectStart = 4;
            public const Unity.Services.Analytics.Internal.Buffer.TokenType EventParamsEnd = 3;
            public const Unity.Services.Analytics.Internal.Buffer.TokenType EventParamsStart = 2;
            public const Unity.Services.Analytics.Internal.Buffer.TokenType EventStart = 0;
            public const Unity.Services.Analytics.Internal.Buffer.TokenType EventTimestamp = 13;
            public const Unity.Services.Analytics.Internal.Buffer.TokenType Float64 = 9;
            public const Unity.Services.Analytics.Internal.Buffer.TokenType Int64 = 11;
            public const Unity.Services.Analytics.Internal.Buffer.TokenType StandardEventIds = 14;
            public const Unity.Services.Analytics.Internal.Buffer.TokenType String = 10;
            public const Unity.Services.Analytics.Internal.Buffer.TokenType Timestamp = 12;
            public int value__;
        }
    }

    public class BufferRevoked : Unity.Services.Analytics.Internal.IBuffer
    {
        public virtual string InstallID { get; set; }
        public virtual string PlayerID { get; set; }
        public virtual string SessionID { get; set; }
        public virtual string UserID { get; set; }
        public BufferRevoked() {}
        public virtual void ClearBuffer();
        public virtual void ClearDiskCache();
        public virtual System.Collections.Generic.List<Unity.Services.Analytics.Internal.Buffer.Token> CloneTokens();
        public virtual void FlushToDisk();
        public virtual void InsertTokens(System.Collections.Generic.List<Unity.Services.Analytics.Internal.Buffer.Token> tokens);
        public virtual void LoadFromDisk();
        public virtual void PushArrayEnd();
        public virtual void PushArrayStart(string name = default(string));
        public virtual void PushBool(bool val, string name = default(string));
        public virtual void PushDouble(double val, string name = default(string));
        public virtual void PushEndEvent();
        public virtual void PushEvent(Unity.Services.Analytics.Internal.Event evt);
        public virtual void PushFloat(float val, string name = default(string));
        public virtual void PushInt(int val, string name = default(string));
        public virtual void PushInt64(long val, string name = default(string));
        public virtual void PushObjectEnd();
        public virtual void PushObjectStart(string name = default(string));
        public virtual void PushStartEvent(string name, System.DateTime datetime, System.Nullable<long> eventVersion, bool addPlayerIdsToEventBody = False);
        public virtual void PushString(string val, string name = default(string));
        public virtual void PushTimestamp(System.DateTime val, string name = default(string));
        public virtual string Serialize(System.Collections.Generic.List<Unity.Services.Analytics.Internal.Buffer.Token> tokens);
    }

    public static class Consent
    {
        public static string None { get; }
        public static string Pipl { get; }
    }

    public class ConsentCheckException : Unity.Services.Core.RequestFailedException
    {
        [UnityEngine.Scripting.Preserve] public Unity.Services.Analytics.Internal.ConsentCheckExceptionReason Reason { get; }
        public ConsentCheckException(Unity.Services.Analytics.Internal.ConsentCheckExceptionReason reason, int errorCode, string message, System.Exception innerException) {}
    }

    [UnityEngine.Scripting.Preserve] public enum ConsentCheckExceptionReason
    {
        public const Unity.Services.Analytics.Internal.ConsentCheckExceptionReason ConsentFlowNotKnown = 4;
        public const Unity.Services.Analytics.Internal.ConsentCheckExceptionReason DeserializationIssue = 1;
        public const Unity.Services.Analytics.Internal.ConsentCheckExceptionReason InvalidConsentFlow = 3;
        public const Unity.Services.Analytics.Internal.ConsentCheckExceptionReason NoInternetConnection = 2;
        public const Unity.Services.Analytics.Internal.ConsentCheckExceptionReason Unknown = 0;
        public int value__;
    }

    public enum ConsentStatus
    {
        public const Unity.Services.Analytics.Internal.ConsentStatus ConsentDenied = 6;
        public const Unity.Services.Analytics.Internal.ConsentStatus ConsentGiven = 5;
        public const Unity.Services.Analytics.Internal.ConsentStatus Forgetting = 1;
        public const Unity.Services.Analytics.Internal.ConsentStatus NotRequired = 3;
        public const Unity.Services.Analytics.Internal.ConsentStatus OptedOut = 2;
        public const Unity.Services.Analytics.Internal.ConsentStatus RequiredButUnchecked = 4;
        public const Unity.Services.Analytics.Internal.ConsentStatus Unknown = 0;
        public int value__;
    }

    public class ConsentTracker : Unity.Services.Analytics.Internal.IConsentTracker
    {
        public virtual System.Collections.Generic.Dictionary<string, string> requiredHeaders { get; }
        public ConsentTracker() {}
        public virtual void BeginOptOutProcess();
        public virtual void BeginOptOutProcess(string identifier);
        [System.Diagnostics.DebuggerStepThrough] [System.Runtime.CompilerServices.AsyncStateMachine(typeof(Unity.Services.Analytics.Internal.ConsentTracker.<CheckGeoIP>d__18))] public virtual System.Threading.Tasks.Task<Unity.Services.Analytics.Internal.GeoIPResponse> CheckGeoIP();
        public virtual void FinishOptOutProcess();
        public virtual bool IsConsentDenied();
        public virtual bool IsConsentGiven();
        public virtual bool IsConsentGiven(string identifier);
        public virtual bool IsGeoIpChecked();
        public virtual bool IsOptingOutInProgress();
        public virtual void SetDenyConsentToAll();
        public virtual void SetUserConsentStatus(string identifier, bool consentGiven);
    }

    public class Dispatcher : Unity.Services.Analytics.Internal.IDispatcher
    {
        public virtual string CollectUrl { get; set; }
        public Dispatcher(Unity.Services.Analytics.Internal.IBuffer buffer, Unity.Services.Analytics.Internal.IConsentTracker consentTracker = default(Unity.Services.Analytics.Internal.IConsentTracker)) {}
        public virtual void Flush();
    }

    public class Event
    {
        public string Name { get; }
        public Unity.Services.Analytics.Internal.EventData Parameters { get; }
        public System.Nullable<int> Version { get; }
        public Event(string name, System.Nullable<int> version) {}
    }

    public class EventData
    {
        public System.Collections.Generic.Dictionary<string, object> Data { get; }
        public void AddBatteryLoad();
        public void AddBuildGuuid();
        public void AddClientVersion();
        public void AddConnectionType();
        public void AddGameBundleID();
        public void AddPlatform();
        public void AddStdParamData(string sdkMethod, string uasID);
        public void AddUserCountry();
        public void Set(string key, bool value);
        public void Set(string key, double value);
        public void Set(string key, int value);
        public void Set(string key, long value);
        public void Set(string key, object value);
        public void Set(string key, float value);
        public void Set(string key, string value);
    }

    public class GeoIPResponse
    {
        public int ageGateLimit;
        public string country;
        public string identifier;
        public string region;
        public GeoIPResponse() {}
    }

    public interface IAnalyticsForgetter
    {
        public abstract void AttemptToForget();
    }

    public interface IBuffer
    {
        public abstract string InstallID { get; set; }
        public abstract string PlayerID { get; set; }
        public abstract string SessionID { get; set; }
        public abstract string UserID { get; set; }
        public abstract void ClearBuffer();
        public abstract void ClearDiskCache();
        public abstract System.Collections.Generic.List<Unity.Services.Analytics.Internal.Buffer.Token> CloneTokens();
        public abstract void FlushToDisk();
        public abstract void InsertTokens(System.Collections.Generic.List<Unity.Services.Analytics.Internal.Buffer.Token> tokens);
        public abstract void LoadFromDisk();
        public abstract void PushArrayEnd();
        public abstract void PushArrayStart(string name = default(string));
        public abstract void PushBool(bool val, string name = default(string));
        public abstract void PushDouble(double val, string name = default(string));
        public abstract void PushEndEvent();
        public abstract void PushEvent(Unity.Services.Analytics.Internal.Event evt);
        public abstract void PushFloat(float val, string name = default(string));
        public abstract void PushInt(int val, string name = default(string));
        public abstract void PushInt64(long val, string name = default(string));
        public abstract void PushObjectEnd();
        public abstract void PushObjectStart(string name = default(string));
        public abstract void PushStartEvent(string name, System.DateTime datetime, System.Nullable<long> eventVersion, bool addPlayerIdsToEventBody = False);
        public abstract void PushString(string val, string name = default(string));
        public abstract void PushTimestamp(System.DateTime val, string name = default(string));
        public abstract string Serialize(System.Collections.Generic.List<Unity.Services.Analytics.Internal.Buffer.Token> tokens);
    }

    public interface IConsentTracker
    {
        public abstract System.Collections.Generic.Dictionary<string, string> requiredHeaders { get; }
        public abstract void BeginOptOutProcess();
        public abstract void BeginOptOutProcess(string identifier);
        public abstract System.Threading.Tasks.Task<Unity.Services.Analytics.Internal.GeoIPResponse> CheckGeoIP();
        public abstract void FinishOptOutProcess();
        public abstract bool IsConsentDenied();
        public abstract bool IsConsentGiven();
        public abstract bool IsConsentGiven(string identifier);
        public abstract bool IsGeoIpChecked();
        public abstract bool IsOptingOutInProgress();
        public abstract void SetDenyConsentToAll();
        public abstract void SetUserConsentStatus(string key, bool consentGiven);
    }

    public interface IDispatcher
    {
        public abstract string CollectUrl { get; set; }
        public abstract void Flush();
    }

    public static class Locale
    {
        public static string AnalyticsRegionLanguageCode();
        [System.Obsolete(@"The 'language-regionSettingsCountry' code used by Analytics is non-standard, so this method may throw exceptions when used on systems with non-ISO language/region combinations. Prefer using AnalyticsRegionLanguageCode instead.")] public static System.Globalization.CultureInfo CurrentCulture();
        [System.Obsolete(@"The 'language-regionSettingsCountry' code used by Analytics is non-standard, so this method may throw exceptions when used on systems with non-ISO language/region combinations. Prefer using AnalyticsRegionLanguageCode instead.")] public static System.Globalization.CultureInfo SystemCulture();
    }

    public static class Runtime
    {
        public static string Name();
    }
}

namespace Unity.Services.Analytics.Internal.Platform
{
    public static class UserCountry
    {
        public static string Name();
    }
}
